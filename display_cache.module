<?php
/**
 * @file
 * Module file for Display Cache.
 */

define('DISPLAY_CACHE_DISABLED', '0');

define('DISPLAY_CACHE_ENABLED', '1');

/**
 * Implements hook_flush_caches().
 */
function display_cache_flush_caches() {
  return array('cache_display_cache');
}

/**
 * Implements hook_admin_menu_cache_info().
 */
function display_cache_admin_menu_cache_info() {
  $links['display_cache'] = array(
    'title' => 'Display Caches',
  );
  return $links;
}

/**
 * Implements hook_menu().
 */
function display_cache_menu() {
  $menu_items = array();

  // Menu item to provide flush cache via admin_menu.
  if (module_exists('admin_menu')) {
    $menu_items['admin_menu/flush-cache/display_cache'] = array(
      'page callback' => '_display_cache_flush_cache_callback',
      'access arguments' => array('flush caches'),
      'type' => MENU_CALLBACK,
    );
  }

  // Menu item for configurations.
  $menu_items['admin/config/development/performance/display-cache'] = array(
    'title' => 'Display Cache Config',
    'page callback' => 'display_cache_settings_forms',
    'access arguments' => array('administer display cache'),
    'file' => 'display_cache.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $menu_items;
}

/**
 * Implements hook_permission().
 */
function display_cache_permission() {
  return array(
    'administer display cache' => array(
      'title' => 'Administer Display Cache',
    ),
  );
}

/**
 * Flushes the display cache of a given entity.
 *
 * If one argument is missing, all following arguments will be ignored.
 *
 * @param string $entity_type
 *   Type like 'node' or 'comment'.
 *
 * @param int|object $entity
 *   (optional) Entity object or entity id.
 *   Leave empty to flush all entities of given type.
 *
 * @param string $view_mode
 *   (optional) View mode like 'full' or 'teaser'.
 *   Leave empty to flush all view modes of given entity.
 */
function display_cache_flush_cache($entity_type, $entity = NULL, $view_mode = NULL) {

  if (is_object($entity)) {
    $entity = entity_id($entity_type, $entity);
  }

  $cache_id = _display_cache_get_cid($entity_type, $entity, $view_mode);
  cache_clear_all($cache_id, 'cache_display_cache', TRUE);
}

/**
 * Returns a cache id.
 *
 * @param string $entity_type
 *   Type like 'node' or 'comment'.
 *
 * @param int $entity_id
 *   (optional) The entity id.
 *
 * @param string $view_mode
 *   (optional) View mode like 'full' or 'teaser'.
 *
 * @return string
 *   The cache id.
 */
function _display_cache_get_cid($entity_type, $entity_id = NULL, $view_mode = NULL) {
  $keys = _display_cache_get_cache_keys($entity_type, $entity_id, $view_mode);
  return implode(':', $keys);
}

/**
 * Returns an array of keys to build a cache id.
 *
 * @param string $entity_type
 *   Type like 'node' or 'comment'.
 *
 * @param int $entity_id
 *   (optional) The entity id.
 *
 * @param string $view_mode
 *   (optional) View mode like 'full' or 'teaser'.
 *
 * @return array
 *   The array of keys to build a cache id.
 */
function _display_cache_get_cache_keys($entity_type, $entity_id = NULL, $view_mode = NULL) {
  $settings = array();

  $keys = array($entity_type);

  if (!empty($entity_id)) {
    $keys[] = $entity_id;
    if (!empty($view_mode)) {
      $keys[] = $view_mode;
      $settings = display_cache_get_settings($entity_type, $view_mode);
    }
  }

  drupal_alter('display_cache_cache_keys', $keys, $entity_type, $entity_id, $view_mode, $settings);

  return $keys;
}

/**
 * Implements hook_entity_delete().
 */
function display_cache_entity_delete($entity, $entity_type) {
  display_cache_flush_cache($entity_type, $entity);
}


/**
 * Implements hook_entity_update().
 */
function display_cache_entity_update($entity, $entity_type) {
  display_cache_flush_cache($entity_type, $entity);
}


/**
 * Menu callback to clear the cache table.
 */
function _display_cache_flush_cache_callback() {
  cache_clear_all('*', 'cache_display_cache', TRUE);
  drupal_goto($_GET['destination']);
}

/**
 * Implements hook_entity_view_alter().
 */
function display_cache_entity_view_alter(&$build, $entity_type) {
  $entity_id = entity_id($entity_type, $build['#' . $entity_type]);
  $view_mode = $build['#view_mode'];

  $settings = display_cache_get_settings($entity_type, $view_mode);

  $keys = _display_cache_get_cache_keys($entity_type, $entity_id, $view_mode);

  if ($settings['use'] === DISPLAY_CACHE_ENABLED) {
    $build['#cache'] = array(
      'keys' => $keys,
      'bin' => 'cache_display_cache',
      'granularity' => $settings['granularity'],
    );
  }
}

/**
 * Returns the display cache settings for given entity type and view mode.
 *
 * @param string $entity_type
 *   The entity type like 'node' or 'comment'.
 *
 * @param string $view_mode
 *   View mode like 'full' or 'teaser'.
 */
function display_cache_get_settings($entity_type, $view_mode) {

  $settings = variable_get('display_cache_' . $entity_type . '_' . $view_mode, FALSE);

  if (!$settings && $view_mode !== 'default') {
    $settings = display_cache_get_settings($entity_type, 'default');
    if (!$settings) {
      return array(
        'use' => DISPLAY_CACHE_DISABLED,
        'page_granularity' => DISPLAY_CACHE_DISABLED,
        'user_granularity' => DISPLAY_CACHE_DISABLED,
        'granularity' => DISPLAY_CACHE_DISABLED,
      );
    }
  }
  return $settings;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function display_cache_form_field_ui_display_overview_form_alter(&$form, &$form_stats) {

  $entity_type = $form['#entity_type'];
  $view_mode = $form['#view_mode'];

  $settings = display_cache_get_settings($entity_type, $view_mode);

  $form['display_cache'] = array(
    '#title' => t('Display Cache Settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#access' => user_access('administer display cache'),
  );

  $form['display_cache']['display_cache_use'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cache the rendered HTML of this view mode.'),
    '#default_value' => $settings['use'],
    '#return_value' => DISPLAY_CACHE_ENABLED,
  );

  $form['display_cache']['display_cache_page_granularity'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cache per URL'),
    '#default_value' => $settings['page_granularity'],
    '#return_value' => DRUPAL_CACHE_PER_PAGE,
    '#states' => array(
      'invisible' => array(
        ':input[name="display_cache_use"]' => array('checked' => FALSE),
      ),
    ),
  );

  $user_granularity_options = array(
    0 => t('No user granularity'),
    DRUPAL_CACHE_PER_ROLE => t('Cache per role'),
    DRUPAL_CACHE_PER_USER => t('Cache per user'),
  );

  $form['display_cache']['display_cache_user_granularity'] = array(
    '#type' => 'radios',
    '#title' => t('User granularity'),
    '#default_value' => $settings['user_granularity'],
    '#options' => $user_granularity_options,
    '#states' => array(
      'invisible' => array(
        ':input[name="display_cache_use"]' => array('checked' => FALSE),
      ),
    ),
  );

  $form['#submit'][] = 'display_cache_view_mode_settings_form_submit';
}

/**
 * Submit handler for display cache settings form.
 *
 * @see display_cache_form_field_ui_display_overview_form_alter()
 */
function display_cache_view_mode_settings_form_submit($form, $form_state) {

  $values = $form_state['values'];

  $page_granularity = $values['display_cache_page_granularity'];
  $user_granularity = $values['display_cache_user_granularity'];

  $settings = array(
    'use' => $values['display_cache_use'],
    'page_granularity' => $page_granularity,
    'user_granularity' => $user_granularity,
    'granularity' => $page_granularity + $user_granularity,
  );

  $entity_type = $form['#entity_type'];
  $view_mode = $form['#view_mode'];

  variable_set('display_cache_' . $entity_type . '_' . $view_mode, $settings);
}
