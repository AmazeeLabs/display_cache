<?php
/**
 * @file
 * Module file for Display Cache.
 */

define('DISPLAY_CACHE_NO_OVERRIDE', '0');

define('DISPLAY_CACHE_ENTITY_OVERRIDE', '1');

/**
 * Implements hook_flush_caches().
 */
function display_cache_flush_caches() {
  return array('cache_display_cache');
}

/**
 * Implements hook_admin_menu_cache_info().
 */
function display_cache_admin_menu_cache_info() {
  $links['display_cache'] = array(
    'title' => 'Display Caches',
  );
  return $links;
}

/**
 * Implements hook_menu().
 */
function display_cache_menu() {
  $menu_items = array();

  // Menu item to provide flush cache via admin_menu.
  if (module_exists('admin_menu')) {
    $menu_items['admin_menu/flush-cache/display_cache'] = array(
      'page callback' => '_display_cache_flush_cache',
      'access arguments' => array('flush caches'),
      'type' => MENU_CALLBACK,
    );
  }

  // Menu item for configurations.
  $menu_items['admin/config/development/performance/display-cache'] = array(
    'title' => 'Display Cache Config',
    'page callback' => 'display_cache_settings_forms',
    'access arguments' => array('administer display cache'),
    'file' => 'display_cache.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $menu_items;
}

/**
 * Implements hook_permission().
 */
function display_cache_permission() {
  return array(
    'administer display cache' => array(
      'title' => 'Administer Display Cache',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function display_cache_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'display_cache') . '/views',
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function display_cache_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin === 'content_types') {
    return "plugins/$plugin";
  }
}

/**
 * Main function of Display Cache. Returns the cached html of given entity.
 *
 * @param string $entity_type
 *   Type like 'node' or 'comment'.
 *
 * @param int|object $entity_id
 *   The entity id like the node id.
 *
 * @param string $view_mode
 *   View mode like 'full' or 'teaser'.
 *
 * @param array $roles
 *   (optional) Array with machine readable names like 'anonymous user'. Use to
 *   build a role aware cache entry.
 *
 * @param bool $reset
 *   (optional) Resets the cache while rendering.
 *
 * @param bool $raw
 *   (optional) Returns the rendered HTML without running
 *   hook_display_cache_post_render_alter.
 *   Might be handy to interrupt infinite recursions. Only use, if you know what
 *   you're doing.
 *
 * @return string
 *   Rendered html.
 */
function display_cache_get_rendered_entity($entity_type, $entity_id, $view_mode, $roles = NULL, $reset = FALSE, $raw = FALSE) {

  $cache_id = display_cache_get_cid($entity_type, $entity_id, $view_mode, $roles);

  if (!$reset) {
    $cache_data = cache_get($cache_id, 'cache_display_cache');
    if ($cache_data) {
      $html = $cache_data->data;
    }
  }
  if (!isset($html)) {
    $html = _display_cache_render_entity($entity_type, $entity_id, $view_mode);
    if (!empty($html)) {
      cache_set($cache_id, $html, 'cache_display_cache');
    }
  }

  if ($raw) {
    return $html;
  }

  $context = array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'view_mode' => $view_mode,
    'roles' => $roles,
  );
  drupal_alter('display_cache_post_render', $html, $context);

  return $html;
}

/**
 * Returns the cache id (CID). The CID is a chain of all given arguments.
 *
 * If one argument is missing all following arguments will be ignored.
 *
 * @param string $entity_type
 *   Type like 'node' or 'comment'.
 *
 * @param int|object $entity
 *   Entity id or entity object.
 *
 * @param string $view_mode
 *   (optional) View mode like 'full' or 'teaser'.
 *
 * @param array $roles
 *   (optional) Array with machine readable names like 'anonymous user'.
 *
 * @return string
 *   The cache id.
 */
function display_cache_get_cid($entity_type, $entity = NULL, $view_mode = NULL, $roles = NULL) {
  $entity_type = _display_cache_limit_key_length($entity_type);

  $cache_id = $entity_type;

  if ($entity) {
    if (is_object($entity)) {
      $entity = entity_id($entity_type, $entity);
    }
    $cache_id .= '--' . $entity;
    if ($view_mode) {
      $view_mode = _display_cache_limit_key_length($view_mode);
      $cache_id .= '--' . $view_mode;
      if ($roles) {
        sort($roles);
        $role_ids = array();
        foreach ($roles as $role) {
          $role_id = user_role_load_by_name($role);
          $role_ids[] = $role_id->rid;
        }
        $cache_id .= '--' . implode('_', $role_ids);
      }
    }
  }

  $context = array(
    'entity_type' => $entity_type,
    'entity_id' => $entity,
    'view_mode' => $view_mode,
    'roles' => $roles,
  );
  drupal_alter('display_cache_get_cid', $cache_id, $context);

  return $cache_id;
}

/**
 * Helper function to return a string with max size of 32 characters.
 *
 * @param string $key
 *   String to limit length.
 *
 * @return string
 *   The string with max size of 32 characters.
 */
function _display_cache_limit_key_length($key) {
  if (strlen($key) > 32) {
    $key = md5($key);
  }
  return $key;
}

/**
 * Flushes the display cache of a given entity.
 *
 * If one argument is missing, all following arguments will be ignored.
 *
 * @param string $entity_type
 *   Type like 'node' or 'comment'.
 *
 * @param int|object $entity
 *   (optional) Entity object or entity id.
 *   Leave empty to flush all entities of given type.
 *
 * @param string $view_mode
 *   (optional) View mode like 'full' or 'teaser'.
 *   Leave empty to flush all view modes of given entity.
 *
 * @param array $roles
 *   (optional) Array with machine readable names like 'anonymous user'.
 */
function display_cache_flush_cache($entity_type, $entity = NULL, $view_mode = NULL, $roles = NULL) {
  $cache_id = display_cache_get_cid($entity_type, $entity, $view_mode, $roles);
  cache_clear_all($cache_id, 'cache_display_cache', TRUE);
}


/**
 * Implements hook_entity_delete().
 */
function display_cache_entity_delete($entity, $entity_type) {
  display_cache_flush_cache($entity_type, $entity);
}


/**
 * Implements hook_entity_update().
 */
function display_cache_entity_update($entity, $entity_type) {
  display_cache_flush_cache($entity_type, $entity);
}

/**
 * Implements hook_ctools_plugin_pre_alter().
 */
function display_cache_ctools_plugin_pre_alter(&$plugin, &$info) {
  if (variable_get('display_cache_override_entity', DISPLAY_CACHE_NO_OVERRIDE) === DISPLAY_CACHE_ENTITY_OVERRIDE) {
    // Alter content types provided by module Entity API to use the content
    // types provided by display cache.
    if (!empty($plugin['content type']) && $plugin['content type'] === 'entity_entity_view_content_type_info') {
      module_load_include('inc', 'display_cache', 'plugins/content_types/display_cache_entity_view');
      $plugin['title'] = 'Rendered Entity | Cached by Display Cache';
      $plugin['content type'] = 'display_cache_entity_view_content_type_info';
      $plugin['module'] = 'display_cache';
      $plugin['name'] = 'display_cache_entity_view_override';
      $plugin['path'] = drupal_get_path('module', 'display_cache') . '/plugins/content_types';
      $plugin['file'] = 'display_cache_entity_view.inc';
    }
  }
}


/**
 * Helper function to return an rendered entity with a given display mode.
 *
 * @param string $entity_type
 *   Type like 'node' or 'comment'.
 *
 * @param int|object $entity_id
 *   Entity object or entity id.
 *
 * @param string $view_mode
 *   View mode like 'full' or 'teaser'.
 *
 * @param array $roles
 *   (optional) Array with machine readable names like 'anonymous user'.
 *
 * @return string
 *   Rendered html.
 */
function _display_cache_render_entity($entity_type, $entity_id, $view_mode, $roles = NULL) {
  $html = '';
  $entity = entity_load($entity_type, array($entity_id));
  if ($entity) {
    $render_array = entity_view($entity_type, $entity, $view_mode);

    $context = array(
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
      'view_mode' => $view_mode,
      'roles' => $roles,
    );

    drupal_alter('display_cache_pre_render', $render_array, $context);

    $html = drupal_render($render_array[$entity_type][$entity_id]);
  }
  return $html;
}

/**
 * Menu callback to clear the cache table.
 */
function _display_cache_flush_cache() {
  cache_clear_all('*', 'cache_display_cache', TRUE);
  drupal_goto($_GET['destination']);
}

/**
 * Implements hook_comment_insert().
 */
function display_cache_comment_insert($comment) {
  display_cache_flush_cache('node', $comment->nid);
}

/**
 * Implements hook_comment_update().
 */
function display_cache_comment_update($comment) {
  display_cache_flush_cache('node', $comment->nid);
}

/**
 * Implements hook_comment_update().
 */
function display_cache_comment_delete($comment) {
  display_cache_flush_cache('node', $comment->nid);
}
